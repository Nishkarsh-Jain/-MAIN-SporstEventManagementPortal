package com.participation.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
//import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.participation.Feign.authClient;
import com.participation.entity.JwtResponse;
import com.participation.entity.Participation;
import com.participation.response.ResponseHandler;
import com.participation.service.ParticipationService;

import lombok.extern.slf4j.Slf4j;

@CrossOrigin(origins = "http://localhost:4200")
@RestController
@Slf4j
@RequestMapping("/pm")
public class ParticipationController {

	@Autowired
	private ParticipationService ps;

	@Autowired
	private authClient auth;

	@PostMapping("/addParticipation")
	public String addParticipation(@RequestBody Participation part) {
		return ps.addParticipation(part);
	}

	@GetMapping("/participations")
	public ResponseEntity<?> listAllParticipation(
			@RequestHeader(name = "authorization", required = true) String token) {
		log.info("Inside listAllSportsDetails method of the Sports Controller.");
		JwtResponse jwtResponse = auth.verifyToken(token);
		log.debug("jwt validity:", jwtResponse.isValid());
		if (jwtResponse.isValid()) {
			List<Participation> ev = ps.listAllParticipation();
			return ResponseHandler.generateResponse("Successfully updated user data!", HttpStatus.OK, ev);
		} else {
			return ResponseHandler.generateResponse("Token expired", HttpStatus.MULTI_STATUS, null);
		}

	}

	/*
	 * @PutMapping("/updateStatus/{partId}") public String
	 * updateStatus(Participation participation, @PathVariable("partId") Long
	 * partId) { return ps.updateStatus(participation,partId); }
	 */
	@GetMapping("/approvedParticipations")
	public List<Participation> listApprovedParticipations() {
		return ps.listApprovedParticipations();
	}

	@GetMapping("/declinedParticipations")
	public List<Participation> listDeclinedParticipations() {
		return ps.listDeclinedParticipations();
	}

	@GetMapping("/pendingParticipations")
	public List<Participation> listPendingParticipations() {
		return ps.listPendingParticipations();
	}

}
