package com.sports.event.controller;

import java.util.List;

import com.sports.event.Feign.authClient;
import com.sports.event.entity.JwtResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import com.sports.event.entity.Events;
import com.sports.event.entity.Sports;
import com.sports.event.service.SportsEventService;
import lombok.extern.slf4j.Slf4j;
import com.sports.event.response.ResponseHandler;
import org.springframework.http.HttpStatus;

@CrossOrigin(origins = "http://localhost:4200")
@RestController
@Slf4j
@RequestMapping("/sem")
public class SportsEventController {

	@Autowired
	private SportsEventService ss;

	@Autowired
	private authClient auth;

	@GetMapping("/sports")
	public ResponseEntity<?> listAllSportsDetails() {
		log.info("Inside listAllSportsDetails method of the Sports Controller.");
	//	JwtResponse jwtResponse = auth.verifyToken(token);
	///	log.debug("jwt validity:",jwtResponse.isValid());
	//	if(jwtResponse.isValid()) {
			List<Sports> ev = ss.listAllSportsDetails();
			return ResponseHandler.generateResponse("Successfully updated user data!", HttpStatus.OK, ev);
		//}
	//	else {
		//	return ResponseHandler.generateResponse("Token expired", HttpStatus.MULTI_STATUS, null);
		//}

	}

	@GetMapping("/sports/{sportName}")
	public ResponseEntity<?> getSportsByName(@RequestHeader(name="authorization",required = true)String token,@PathVariable("sportName") String sportName) {
		log.info("Inside getSportsByName method of the Sports Controller.");
		JwtResponse jwtResponse = auth.verifyToken(token);
		log.debug("jwt validity:",jwtResponse.isValid());
		log.info("Inside events method of the Sports Controller.");
		if(jwtResponse.isValid()) {
			Sports ev = ss.getSportsByName(sportName);
			return ResponseHandler.generateResponse("Successfully updated user data!", HttpStatus.OK, ev);
		}
		else {
			return ResponseHandler.generateResponse("Token expired", HttpStatus.MULTI_STATUS, null);
		}
	}

	@PostMapping("/addEvent")
	public ResponseEntity<?> addEvent(@RequestHeader(name="authorization",required = true)String token,@RequestBody Events event) {
		log.info("Inside addEvent method of the Sports Controller.");
		JwtResponse jwtResponse = auth.verifyToken(token);
		log.debug("jwt validity:",jwtResponse.isValid());
		log.info("Inside events method of the Sports Controller.");
		if(jwtResponse.isValid()) {
			Events ev = ss.addEvent(event);
			return ResponseHandler.generateResponse("Successfully updated user data!", HttpStatus.OK, ev);
		}
		else {
			return ResponseHandler.generateResponse("Token expired", HttpStatus.MULTI_STATUS, null);
		}
	}
	/* @PutMapping("/updateEvent")
	public ResponseEntity<?> updateEvent(@RequestHeader(name="authorization",required = true)String token,@RequestBody Events event) {
		log.info("Inside addEvent method of the Sports Controller.");
		JwtResponse jwtResponse = auth.verifyToken(token);
		log.debug("jwt validity:",jwtResponse.isValid());
		log.info("Inside events method of the Sports Controller.");
		if(jwtResponse.isValid()) {
			Events ev = ss.addEvent(event);
			return ResponseHandler.generateResponse("Successfully updated user data!", HttpStatus.OK, ev);
		}
		else {
			return ResponseHandler.generateResponse("Token expired", HttpStatus.MULTI_STATUS, null);
		}
	} */

	@DeleteMapping("/deleteEvent/{eventId}")
	public ResponseEntity<?> deleteEvent(@RequestHeader(name="authorization",required = true)String token,@PathVariable("eventId") long eventId) {
		log.info("Inside delete method of the Sports Controller.");
		JwtResponse jwtResponse = auth.verifyToken(token);
		log.debug("jwt validity:",jwtResponse.isValid());
		if(jwtResponse.isValid()) {
			String ev = ss.deleteEvent(eventId);
			return ResponseHandler.generateResponse("Successfully updated user data!", HttpStatus.OK, ev);
		}
		else {
			return ResponseHandler.generateResponse("Token expired", HttpStatus.MULTI_STATUS, null);
		}


	}

	@GetMapping("/events")
	public ResponseEntity<?> events(@RequestHeader(name="authorization",required = true)String token) {
		JwtResponse jwtResponse = auth.verifyToken(token);
		log.debug("jwt validity:",jwtResponse.isValid());
		log.info("Inside events method of the Sports Controller.");
		if(jwtResponse.isValid()) {
			List<Events> event = ss.events();
			return ResponseHandler.generateResponse("Successfully updated user data!", HttpStatus.OK, event);
		}
		else {
			return ResponseHandler.generateResponse("Token expired", HttpStatus.MULTI_STATUS, null);
		}
	}

	@GetMapping("/events/{eventName}")
	public ResponseEntity<?> eventsByName(@RequestHeader(name="authorization",required = true)String token,@PathVariable("eventName") String eventName) {
		log.info("Inside eventNyName method of the Sports Controller.");
		JwtResponse jwtResponse = auth.verifyToken(token);
		log.debug("jwt validity:",jwtResponse.isValid());
		//return ss.eventsByName(eventName);
		if(jwtResponse.isValid()) {
			Events event = ss.eventsByName(eventName);
			return ResponseHandler.generateResponse("Successfully updated user data!", HttpStatus.OK, event);
		}
		else {
			return ResponseHandler.generateResponse("Token expired", HttpStatus.MULTI_STATUS, null);
		}
	}

}
